---
import ThemeToggle from './ThemeToggle.astro'

const navItems = [
  {
    title: 'Experiencia',
    label: 'experiencia',
    url: '/#experiencia',
  },
  {
    title: 'Proyectos',
    label: 'proyectos',
    url: '/#proyectos',
  },
  {
    title: 'Sobre m√≠',
    label: 'sobre-mi',
    url: '/#sobre-mi',
  },
  {
    title: 'Contacto',
    label: 'contacto',
    url: 'mailto:frank.santosg.dev@gmail.com',
  },
]
---

<header
  class="backdrop-blur-md bg-dark-200/30 dark:bg-dark-900/30 fixed w-full z-20 top-0 left-0flex items-center justify-center mx-auto"
>
  <nav
    class="lg:max-w-[1114px] flex flex-wrap mx-auto py-4 font-medium rounded-full text-black dark:text-gray-200 text-[11px] md:text-lg"
  >
    <nav class="container flex flex-row items-center justify-around">
      {
        navItems.map((link) => (
          <a
            class="relative overflow-hidden block px-2 py-2 z-10 p-2   hover:text-violet-900 dark:hover:text-yellow-400 before:absolute before:bottom-0 before:left-0 before:h-[2px] before:w-0 before:backdrop-blur-lg before:rounded-lg rounded-xl before:-z-10 before:transition-all before:duration-500 before:hover:w-full  transition-all duration-300dark:hover:text-yellow-400 
      before:bg-violet-900 dark:before:bg-yellow-400 font-semibold"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        ))
      }
      <ThemeToggle />
    </nav>
  </nav>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const sections = document.querySelectorAll('section')
    const navItems = document.querySelectorAll('header nav a')
    let themePreference = localStorage.getItem('theme') || 'system'

    document.addEventListener('themeChange', (e) => {
      const customEvent = e as CustomEvent
      const theme = customEvent.detail.theme
      themePreference = theme || 'system'
      navItems.forEach((item) => {
        if (theme === 'light') {
          if (item.classList.contains('text-violet-900')) {
            item.classList.remove('text-violet-900')
          }
          if (item.classList.contains('text-yellow-500')) {
            item.classList.remove('text-yellow-500')
          }
        } else {
          if (item.classList.contains('text-yellow-500')) {
            item.classList.remove('text-yellow-500')
          }
          if (item.classList.contains('text-violet-900')) {
            item.classList.remove('text-violet-900')
          }
        }
      })
    })

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (themePreference === 'light') {
              if (item.getAttribute('aria-label') == entry.target.id) {
                item.classList.add('text-violet-900')
              } else {
                item.classList.remove('text-violet-900')
              }
            } else {
              if (item.getAttribute('aria-label') == entry.target.id) {
                item.classList.add('text-yellow-500')
              } else {
                item.classList.remove('text-yellow-500')
              }
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }

    const nav = document.querySelector<HTMLElement>('header nav')
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      /* @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10; */
    }
  }
</style>
